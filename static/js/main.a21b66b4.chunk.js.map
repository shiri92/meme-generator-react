{"version":3,"sources":["components/Header.js","services/memeSefrvice.js","components/MemeGenerator.js","App.js","serviceWorker.js","index.js","assets/img/TrollFace.png"],"names":["Header","react_default","a","createElement","className","src","TrollFace","alt","_callee","res","data","regenerator_default","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","memeSefrvice","getImages","MemeGenerator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","ev","_ev$target","target","name","value","setState","defineProperty","handleSubmit","preventDefault","images","state","allMemeImages","randomImgUrl","Math","floor","random","length","url","randomImage","topText","bottomText","memeService","memes","onSubmit","type","placeholder","onChange","Component","App","components_Header","components_MemeGenerator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"qNAeeA,EAXA,WACX,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2DACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,IAAKC,IAAWC,IAAI,YAC1CN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,mICPhB,SAAAI,IAAA,IAAAC,EAAAC,EAAA,OAAAC,EAAAT,EAAAU,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACoBC,MAAM,qCAD1B,cACQP,EADRI,EAAAI,KAAAJ,EAAAE,KAAA,EAEqBN,EAAIS,OAFzB,cAEQR,EAFRG,EAAAI,KAAAJ,EAAAM,OAAA,SAGWT,GAHX,wBAAAG,EAAAO,SAAAZ,6BAOe,IAAAa,EAAA,CACXC,sDC0DWC,cA9DX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcJI,aAAe,SAAAC,GAAM,IAAAC,EACKD,EAAGE,OAAnBC,EADWF,EACXE,KAAMC,EADKH,EACLG,MACZZ,EAAKa,SAALZ,OAAAa,EAAA,EAAAb,CAAA,GAAiBU,EAAOC,KAjBdZ,EAoBde,aAAe,SAAAP,GACXA,EAAGQ,iBACH,IAAIC,EAASjB,EAAKkB,MAAMC,cACpBC,EAAeH,EAAOI,KAAKC,MAAMD,KAAKE,SAAWN,EAAOO,SAASC,IACrEzB,EAAKa,SAAS,CAAEa,YAAaN,KAtB7BpB,EAAKkB,MAAQ,CACTS,QAAS,GACTC,WAAY,GACZF,YAAa,gCACbP,cAAe,IANTnB,iNAWM6B,EAAY/B,mBAAxBb,SACJkB,KAAKU,SAAS,CAAEM,cAAelC,EAAIC,KAAK4C,2IAiBxC,OACIrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAwBmD,SAAU5B,KAAKY,cACnDtC,EAAAC,EAAAC,cAAA,SACIC,UAAU,eACVoD,KAAK,OACLpB,MAAOT,KAAKe,MAAMS,QAClBhB,KAAK,UACLsB,YAAY,WACZC,SAAU/B,KAAKI,eAGnB9B,EAAAC,EAAAC,cAAA,SACIC,UAAU,eACVoD,KAAK,OACLpB,MAAOT,KAAKe,MAAMU,WAClBjB,KAAK,aACLsB,YAAY,cACZC,SAAU/B,KAAKI,eAEnB9B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAlB,QAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,GAAGC,IAAKsB,KAAKe,MAAMQ,YAAa3C,IAAI,YACnDN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAOuB,KAAKe,MAAMS,SAChClD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUuB,KAAKe,MAAMU,qBAvD3BO,aCWbC,MAVf,WACI,OACI3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC0D,EAAD,MACA5D,EAAAC,EAAAC,cAAC2D,EAAD,QCEQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.a21b66b4.chunk.js","sourcesContent":["import React from 'react';\n\nimport TrollFace from '../assets/img/TrollFace.png';\n\nconst Header = () => {\n    return (\n        <header className=\"header\">\n            <div className=\"header-content container py-4 d-flex align-items-center\">\n                <img className=\"mx-5\" src={TrollFace} alt=\"problem\" />\n                <p className=\"text-center\">Meme Generator</p>\n            </div>\n        </header>\n    );\n}\n\nexport default Header;\n","\n\nasync function getImages() {\n    let res = await fetch('https://api.imgflip.com/get_memes');\n    let data = await res.json();\n    return data;\n}\n\n\nexport default {\n    getImages\n}","import React, { Component } from 'react';\n\nimport memeService from '../services/memeSefrvice';\n\n\nclass MemeGenerator extends Component {\n    constructor() {\n        super()\n        this.state = {\n            topText: '',\n            bottomText: '',\n            randomImage: 'http://i.imgflip.com/1bij.jpg',\n            allMemeImages: []\n        }\n    }\n\n    async componentDidMount() {\n        let res = await memeService.getImages();\n        this.setState({ allMemeImages: res.data.memes });\n    }\n\n    handleChange = ev => {\n        let { name, value } = ev.target;\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit = ev => {\n        ev.preventDefault();\n        let images = this.state.allMemeImages;\n        let randomImgUrl = images[Math.floor(Math.random() * images.length)].url;\n        this.setState({ randomImage: randomImgUrl });\n    }\n\n\n    render() {\n        return (\n            <div className=\"meme-generator\">\n                <form className=\"meme-form d-flex my-4\" onSubmit={this.handleSubmit}>\n                    <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        value={this.state.topText}\n                        name=\"topText\"\n                        placeholder=\"Top text\"\n                        onChange={this.handleChange}\n                    />\n\n                    <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        value={this.state.bottomText}\n                        name=\"bottomText\"\n                        placeholder=\"Bottom text\"\n                        onChange={this.handleChange}\n                    />\n                    <button className=\"btn btn-primary\">Gen</button>\n                </form>\n                <div className=\"meme position-relative\">\n                    <img className=\"\" src={this.state.randomImage} alt=\"problem\" />\n                    <h2 className=\"top\">{this.state.topText}</h2>\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\n                </div>\n            </div>\n        );\n\n    }\n}\n\nexport default MemeGenerator;\n","import React from 'react';\n\nimport Header from './components/Header';\nimport MemeGenerator from './components/MemeGenerator';\n// import Footer from './components/Footer';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header></Header>\n            <MemeGenerator></MemeGenerator>\n            {/* <Footer></Footer> */}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/TrollFace.be324d5b.png\";"],"sourceRoot":""}